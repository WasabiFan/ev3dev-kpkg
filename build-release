#!/bin/bash

set -e

REVISION=$(dpkg-parsechangelog | sed -n -e 's/^Version: //p')

if [ ! -z "$1" ]; then
    REPO=$1
else
    REPO="test"
fi

PACKAGE_VERSION=$(dpkg-parsechangelog | sed -n -e 's/Source: linux-source-//p')

# make sure we are ignoring debian/control in all of the modules because
# it is automatically updateed

if [ -d modules ]; then
    pushd modules

    for d in $(ls)
    do
        pushd ${d}
        git update-index --assume-unchanged debian/control
        popd
    done

    popd
fi

pushd kernel

KERNEL_VERSION=$(make ARCH=arm kernelversion)

if [ "${PACKAGE_VERSION}" != "${KERNEL_VERSION}" ]; then
    echo "Kernel version does not match debian/changelog"
    exit 1
fi

if [ "${REPO}" != "test" ]; then
    git tag "v${KERNEL_VERSION}_${REVISION//\~/pre}"
fi

echo "---- CLEANING UP ----"
make ARCH=arm distclean
git clean -dfX
git clean -df
find ../modules -mindepth 1 -maxdepth 1 -type d -exec make -C {} clean \;
echo "---- LOADING DEFAULT CONFIGURATION ----"
make ARCH=arm ev3dev_defconfig
# make sure kernel version (uname -v) matches debian revision
echo $(expr match ${REVISION} '^[0-9]*') > .version
echo "---- BUILDING PACKAGES ----"
LOCALVERSION="" DEB_HOST_ARCH=armel MODULE_LOC=../modules \
    make-kpkg --rootcmd fakeroot --overlay-dir ../debian \
    --arch arm --cross-compile /opt/arm-2011.03/bin/arm-none-eabi- \
    --initrd --revision ${REVISION} --jobs $(nproc) \
    kernel_image kernel_headers modules
echo "---- GENERATING CHANGES FILE ----"
dpkg-genchanges -b > ../ev3dev-kernel_${REVISION}.changes
cd ..
echo "---- SIGNING AND UPLOADING ----"
debsign *.changes
dput ev3dev.${REPO} *.changes
rm -f *.deb *.changes *.upload
