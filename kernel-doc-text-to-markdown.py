#!/usr/bin/env python3

DESCRIPTION = "Run kernel-doc script and convert to markdown"

import argparse
import glob
import os.path
import subprocess
import sys

def error(message):
    print("Error: {0}".format(message), file=sys.stderr)
    exit(1)

def main():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('kdir', type=str, help='kernel source directory')
    parser.add_argument('destination', type=str, help='destination folder')
    parser.add_argument('file_names', metavar='file', type=str, nargs='+',
            help='port definition file names')
    args = parser.parse_args()
    proc = subprocess.Popen(['make', '-s', '-C', args.kdir, 'kernelversion'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    kernel_version, err = proc.communicate()
    if err:
        error(err)
    kernel_version = kernel_version.decode('ascii').strip()
    all_file_names = []
    for arg_file_name in args.file_names:
        file_name = os.path.join(args.kdir, arg_file_name)
        if not os.path.isfile(file_name):
            error('File {0} does not exist.'.format(file_name))
        all_file_names.append(file_name)
    kernel_doc_script = os.path.join(args.kdir, 'scripts/kernel-doc')
    for file_name in all_file_names:
        out_file_name = file_name.split('/')[-1].replace('.c', '.markdown')
        out_file_name = out_file_name.replace('_core', '').replace('_', '-')
        out_file_name = os.path.join(args.destination, 'docs/drivers', out_file_name)
        proc = subprocess.Popen([kernel_doc_script, '-text', '-function', 'website', file_name],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        kernel_doc, err = proc.communicate()
        if err:
            error(err)
        kernel_doc = kernel_doc.decode('utf-8')
        # TODO: may want to include source_line like sensors/port defs.
        # In order to do this, we would need to read file_name and find the line
        # that contains 'website:'
        with open(out_file_name, 'w') as out_file:
            for i, line in enumerate(kernel_doc.split('\n')):
                # kernel-doc parsing script joins any line ending with '\' to
                # the next line. So, if we need a line that ends in '\', we
                # "reverse-escape" it with '$', then remove the escape here.
                line = line.replace('\\$', '\\')
                if i == 0:
                    print('---', file=out_file)
                    print('autogen:', 'This file was automatically generated by ' +
                            'kernel-doc-text-to-markdown.py', file=out_file)
                    print('kernel_version:', kernel_version, file=out_file)
                    print('source_file:', file_name.replace(args.kdir, '')[1:], file=out_file)
                elif i == 1:
                    print('title:', line[7:], file=out_file)
                    print('---', file=out_file)
                    print(file=out_file)
                elif line.startswith('.'):
                    print(line[1:], file=out_file)
                else:
                    print(line, file=out_file)

if __name__ == "__main__":
    main()
